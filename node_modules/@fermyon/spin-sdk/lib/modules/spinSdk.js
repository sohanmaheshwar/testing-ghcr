import { router } from "./router";
import { utils } from "./utils";
function encodeBody(body) {
    if (typeof (body) == "string") {
        return new TextEncoder().encode(body).buffer;
    }
    else if (ArrayBuffer.isView(body)) {
        return body.buffer;
    }
    else {
        return body;
    }
}
class ResponseBuilder {
    constructor() {
        this.response = {
            status: 200,
            headers: {}
        };
        this.statusCode = this.response.status;
    }
    getHeader(key) {
        return this.response.headers[key] || null;
    }
    header(key, value) {
        this.response.headers[key] = value;
        return this;
    }
    status(status) {
        this.response.status = status;
        this.statusCode = this.response.status;
        return this;
    }
    body(data) {
        this.response.body = encodeBody(data);
        return this;
    }
}
const kv = {
    open: (name) => {
        let store = __internal__.spin_sdk.kv.open(name);
        store.getJson = (key) => {
            let val = store.get(key);
            if (val) {
                return JSON.parse(new TextDecoder().decode(val));
            }
            else {
                return null;
            }
        };
        store.setJson = (key, value) => {
            store.set(key, JSON.stringify(value));
        };
        return store;
    },
    openDefault: () => {
        let store = kv.open("default");
        return store;
    }
};
/**  features
 */
/** @deprecated */
const spinSdk = {
    config: __internal__.spin_sdk.config,
    redis: __internal__.spin_sdk.redis,
    kv: kv,
    mysql: __internal__.spin_sdk.mysql,
    pg: __internal__.spin_sdk.pg,
    sqlite: __internal__.spin_sdk.sqlite,
    llm: __internal__.spin_sdk.llm,
    utils: utils,
    Router: () => {
        return router();
    }
};
var InferencingModels;
(function (InferencingModels) {
    InferencingModels["Llama2Chat"] = "llama2-chat";
    InferencingModels["CodellamaInstruct"] = "codellama-instruct";
})(InferencingModels || (InferencingModels = {}));
var EmbeddingModels;
(function (EmbeddingModels) {
    EmbeddingModels["AllMiniLmL6V2"] = "all-minilm-l6-v2";
})(EmbeddingModels || (EmbeddingModels = {}));
const Llm = {
    infer: (model, prompt, options) => {
        if (!options) {
            return __internal__.spin_sdk.llm.infer(model, prompt);
        }
        let inference_options = {
            max_tokens: options.maxTokens || 100,
            repeat_penalty: options.repeatPenalty || 1.1,
            repeat_penalty_last_n_token_count: options.repeatPenaltyLastNTokenCount || 64,
            temperature: options.temperature || 0.8,
            top_k: options.topK || 40,
            top_p: options.topP || 0.9
        };
        return __internal__.spin_sdk.llm.inferWithOptions(model, prompt, inference_options);
    },
    generateEmbeddings: (model, text) => {
        return __internal__.spin_sdk.llm.generateEmbeddings(model, text);
    }
};
const Config = __internal__.spin_sdk.config;
const Redis = __internal__.spin_sdk.redis;
const Kv = kv;
const Mysql = __internal__.spin_sdk.mysql;
const Pg = __internal__.spin_sdk.pg;
const Sqlite = __internal__.spin_sdk.sqlite;
// const Llm = __internal__.spin_sdk.llm
export { spinSdk };
export { Config, Redis, Kv, router, Mysql, Pg, Sqlite, Llm, InferencingModels, EmbeddingModels, ResponseBuilder };
